{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","state","loader","currencies","handleChange","event","val","target","value","_this","setState","selectValue","fetchData","initialData","url","concat","console","log","fetch","then","data","json","findData","rates","catch","err","_this$state","this","list","Object","keys","map","current","react_default","a","createElement","id","key","className","name","onChange","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uKCqGzBC,0NAhGbC,MAAQ,CACNC,QAAQ,EACRC,WAAY,MAGdC,aAAe,SAAAC,GACb,IAAMC,EAAMD,EAAME,OAAOC,MACzBC,EAAKC,SAAS,CACZC,YAAaL,OAIjBM,UAAY,WACVH,EAAKC,SAAS,CACZR,QAAQ,IAEV,IAAIW,EAAc,GACZC,EAAG,uFAAAC,OACPN,EAAKR,MAAMU,YADJ,aAITK,QAAQC,IAAI,eAAiBH,GAC7BI,MAAMJ,GACHK,KAAK,SAAAC,GACJ,OAAOA,EAAKC,SAEbF,KAAK,SAAAG,GACJT,EAAcS,EAASC,MACvBd,EAAKC,SAAS,CACZP,WAAYU,EACZX,QAAQ,MAGXsB,MAAM,SAAAC,GAAG,OAAIT,QAAQC,IAAIQ,8EAGrB,IAAAC,EACwBC,KAAK1B,MAA5BE,EADDuB,EACCvB,WAAYD,EADbwB,EACaxB,OAChB0B,EAAO,KAaX,OAZI1B,EACF0B,EAAO,cACG1B,GAAUC,IACpByB,EAAOC,OAAOC,KAAK3B,GAAY4B,IAAI,SAAAC,GAAO,OACxCC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,MAAMC,IAAKL,GAChBA,EADH,KACc7B,EAAW6B,GADzB,YAEAC,EAAAC,EAAAC,cAAA,WACPF,EAAAC,EAAAC,cAAA,eAMKF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,cACjBL,EAAAC,EAAAC,cAAA,MAAIC,GAAI,QAAQE,UAAU,aAA1B,4BACEV,EACDK,EAAAC,EAAAC,cAAA,OAAKG,UAAU,YACbL,EAAAC,EAAAC,cAAA,UACEC,GAAG,UACHG,KAAK,WACL/B,MAAOmB,KAAK1B,MAAMU,YAClB6B,SAAUb,KAAKvB,cAEf6B,EAAAC,EAAAC,cAAA,UAAQ3B,MAAM,OAAd,yBACAyB,EAAAC,EAAAC,cAAA,UAAQ3B,MAAM,OAAd,wBACAyB,EAAAC,EAAAC,cAAA,UAAQ3B,MAAM,OAAd,wBACAyB,EAAAC,EAAAC,cAAA,UAAQ3B,MAAM,OAAd,wBACPyB,EAAAC,EAAAC,cAAA,UAAQ3B,MAAM,OAAd,wBACOyB,EAAAC,EAAAC,cAAA,UAAQ3B,MAAM,OAAd,wBACPyB,EAAAC,EAAAC,cAAA,UAAQ3B,MAAM,OAAd,wBACAyB,EAAAC,EAAAC,cAAA,UAAQ3B,MAAM,OAAd,wBACAyB,EAAAC,EAAAC,cAAA,UAAQ3B,MAAM,OAAd,wBACAyB,EAAAC,EAAAC,cAAA,UAAQ3B,MAAM,OAAd,yBAMNyB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,YAKSF,EAAAC,EAAAC,cAAA,UAAQC,GAAG,UAAUE,UAAU,UAAUG,QAASd,KAAKf,WAAvD,cAGAqB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,oBAzFQO,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,KAAK,SAAAqC,GACjCA,EAAaC","file":"static/js/main.584065cd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    loader: false,\n    currencies: []\n  };\n\n  handleChange = event => {\n    const val = event.target.value;\n    this.setState({\n      selectValue: val\n    });\n  };\n\n  fetchData = () => {\n    this.setState({\n      loader: true\n    });\n    let initialData = [];\n    const url = `http://data.fixer.io/api/latest?access_key=ea263e28e82bbd478f20f7e2ef2b309f&symbols=${\n      this.state.selectValue\n    }&format=1`;\n\n    console.log(\"the url is: \" + url);\n    fetch(url)\n      .then(data => {\n        return data.json();\n      })\n      .then(findData => {\n        initialData = findData.rates;\n        this.setState({\n          currencies: initialData,\n          loader: false\n        });\n      })\n      .catch(err => console.log(err));\n  };\n\n  render() {\n    const { currencies, loader } = this.state;\n    let list = null;\n    if (loader) {\n      list = \"loading...\";\n    } else if (!loader && currencies) {\n      list = Object.keys(currencies).map(current => (\n        <div id=\"res\" key={current}>\n          {current}: {currencies[current]} To 1 EUR\n        <br/>\n\t<br/>\n\t</div>\n\t\n      ));\n    }\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n         <h1 id= \"mainp\" className=\"App-title\"> Welcome to DKK website </h1>\n          {list}\n          <div className=\"dropdown\">\n            <select\n              id=\"select1\"\n              name=\"currency\"\n              value={this.state.selectValue}\n              onChange={this.handleChange}\n            >\n              <option value=\"EUR\">-- Selecting: NILL --</option>\n              <option value=\"CAD\">-- Selecting: CAD --</option>\n              <option value=\"SGD\">-- Selecting: SGD --</option>\n              <option value=\"AUD\">-- Selecting: AUD --</option>\n\t      <option value=\"AMD\">-- Selecting: AMD --</option>\n       \t      <option value=\"IDR\">-- Selecting: IDR --</option>\n\t      <option value=\"PEN\">-- Selecting: PEN --</option>\n\t      <option value=\"RUB\">-- Selecting: RUB --</option>\n\t      <option value=\"THB\">-- Selecting: THB --</option>\n\t      <option value=\"AFN\">-- Selecting: AFN --</option>\n\t\n\n\n\n </select>\n\t<br/>\n\t<br/>\n\t\n\n          </div>\n\n          <button id=\"sbutton\" className=\"pressMe\" onClick={this.fetchData}>\n            Set Button\n          </button>\n          <br />\n          <br />\n\n       </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}